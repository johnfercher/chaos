// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	models "github.com/johnfercher/chaos/internal/core/models"
	mock "github.com/stretchr/testify/mock"
)

// DecoratorStrategy is an autogenerated mock type for the DecoratorStrategy type
type DecoratorStrategy struct {
	mock.Mock
}

type DecoratorStrategy_Expecter struct {
	mock *mock.Mock
}

func (_m *DecoratorStrategy) EXPECT() *DecoratorStrategy_Expecter {
	return &DecoratorStrategy_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function with given fields: _a0
func (_m *DecoratorStrategy) Generate(_a0 *models.Interface) string {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(*models.Interface) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DecoratorStrategy_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type DecoratorStrategy_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - _a0 *models.Interface
func (_e *DecoratorStrategy_Expecter) Generate(_a0 interface{}) *DecoratorStrategy_Generate_Call {
	return &DecoratorStrategy_Generate_Call{Call: _e.mock.On("Generate", _a0)}
}

func (_c *DecoratorStrategy_Generate_Call) Run(run func(_a0 *models.Interface)) *DecoratorStrategy_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Interface))
	})
	return _c
}

func (_c *DecoratorStrategy_Generate_Call) Return(_a0 string) *DecoratorStrategy_Generate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DecoratorStrategy_Generate_Call) RunAndReturn(run func(*models.Interface) string) *DecoratorStrategy_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// NewDecoratorStrategy creates a new instance of DecoratorStrategy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDecoratorStrategy(t interface {
	mock.TestingT
	Cleanup(func())
},
) *DecoratorStrategy {
	mock := &DecoratorStrategy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
