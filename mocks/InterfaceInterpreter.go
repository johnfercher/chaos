// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	models "github.com/johnfercher/chaos/internal/core/models"
	mock "github.com/stretchr/testify/mock"
)

// InterfaceInterpreter is an autogenerated mock type for the InterfaceInterpreter type
type InterfaceInterpreter struct {
	mock.Mock
}

type InterfaceInterpreter_Expecter struct {
	mock *mock.Mock
}

func (_m *InterfaceInterpreter) EXPECT() *InterfaceInterpreter_Expecter {
	return &InterfaceInterpreter_Expecter{mock: &_m.Mock}
}

// Interpret provides a mock function with given fields: file
func (_m *InterfaceInterpreter) Interpret(file string) []*models.Interface {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for Interpret")
	}

	var r0 []*models.Interface
	if rf, ok := ret.Get(0).(func(string) []*models.Interface); ok {
		r0 = rf(file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Interface)
		}
	}

	return r0
}

// InterfaceInterpreter_Interpret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Interpret'
type InterfaceInterpreter_Interpret_Call struct {
	*mock.Call
}

// Interpret is a helper method to define mock.On call
//   - file string
func (_e *InterfaceInterpreter_Expecter) Interpret(file interface{}) *InterfaceInterpreter_Interpret_Call {
	return &InterfaceInterpreter_Interpret_Call{Call: _e.mock.On("Interpret", file)}
}

func (_c *InterfaceInterpreter_Interpret_Call) Run(run func(file string)) *InterfaceInterpreter_Interpret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *InterfaceInterpreter_Interpret_Call) Return(_a0 []*models.Interface) *InterfaceInterpreter_Interpret_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InterfaceInterpreter_Interpret_Call) RunAndReturn(run func(string) []*models.Interface) *InterfaceInterpreter_Interpret_Call {
	_c.Call.Return(run)
	return _c
}

// NewInterfaceInterpreter creates a new instance of InterfaceInterpreter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInterfaceInterpreter(t interface {
	mock.TestingT
	Cleanup(func())
},
) *InterfaceInterpreter {
	mock := &InterfaceInterpreter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
