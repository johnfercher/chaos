// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// File is an autogenerated mock type for the File type
type File struct {
	mock.Mock
}

type File_Expecter struct {
	mock *mock.Mock
}

func (_m *File) EXPECT() *File_Expecter {
	return &File_Expecter{mock: &_m.Mock}
}

// Read provides a mock function with given fields: pathName
func (_m *File) Read(pathName string) (string, error) {
	ret := _m.Called(pathName)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(pathName)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(pathName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pathName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// File_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type File_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - pathName string
func (_e *File_Expecter) Read(pathName interface{}) *File_Read_Call {
	return &File_Read_Call{Call: _e.mock.On("Read", pathName)}
}

func (_c *File_Read_Call) Run(run func(pathName string)) *File_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *File_Read_Call) Return(_a0 string, _a1 error) *File_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *File_Read_Call) RunAndReturn(run func(string) (string, error)) *File_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: pathName, content
func (_m *File) Write(pathName string, content string) error {
	ret := _m.Called(pathName, content)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(pathName, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// File_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type File_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - pathName string
//   - content string
func (_e *File_Expecter) Write(pathName interface{}, content interface{}) *File_Write_Call {
	return &File_Write_Call{Call: _e.mock.On("Write", pathName, content)}
}

func (_c *File_Write_Call) Run(run func(pathName string, content string)) *File_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *File_Write_Call) Return(_a0 error) *File_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *File_Write_Call) RunAndReturn(run func(string, string) error) *File_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewFile creates a new instance of File. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFile(t interface {
	mock.TestingT
	Cleanup(func())
},
) *File {
	mock := &File{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
