// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Orchestrator is an autogenerated mock type for the Orchestrator type
type Orchestrator struct {
	mock.Mock
}

type Orchestrator_Expecter struct {
	mock *mock.Mock
}

func (_m *Orchestrator) EXPECT() *Orchestrator_Expecter {
	return &Orchestrator_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function with given fields: readFilePath, writeFilePath, name
func (_m *Orchestrator) Generate(readFilePath string, writeFilePath string, name string) error {
	ret := _m.Called(readFilePath, writeFilePath, name)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(readFilePath, writeFilePath, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Orchestrator_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type Orchestrator_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - readFilePath string
//   - writeFilePath string
//   - name string
func (_e *Orchestrator_Expecter) Generate(readFilePath interface{}, writeFilePath interface{}, name interface{}) *Orchestrator_Generate_Call {
	return &Orchestrator_Generate_Call{Call: _e.mock.On("Generate", readFilePath, writeFilePath, name)}
}

func (_c *Orchestrator_Generate_Call) Run(run func(readFilePath string, writeFilePath string, name string)) *Orchestrator_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Orchestrator_Generate_Call) Return(_a0 error) *Orchestrator_Generate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Orchestrator_Generate_Call) RunAndReturn(run func(string, string, string) error) *Orchestrator_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// NewOrchestrator creates a new instance of Orchestrator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrchestrator(t interface {
	mock.TestingT
	Cleanup(func())
},
) *Orchestrator {
	mock := &Orchestrator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
